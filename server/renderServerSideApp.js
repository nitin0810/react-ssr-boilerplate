import React from 'react';
import ReactDOMServer from 'react-dom/server';
import { StaticRouter } from 'react-router-dom';
import Helmet from 'react-helmet';
import path from 'path';

import { getAppEnv } from '../config/env';
import { ChunkExtractor, ChunkExtractorManager } from '@loadable/server';


import App from '../src/App.jsx';
import { fetchDataForRender } from './fetchDataForRender';
import { ServerDataProvider } from '../src/state/serverDataContext';

const env = getAppEnv();
const { NODE_ENV } = env.raw;

const APP_DATA = {
  homePage: { a: 2, b: 3 },
  aboutPage: { a: 22, b: 33 },
};


export const renderServerSideApp = (req, res) => {
  renderApp(req, res)
};

function renderApp(req, res) {
  const context = APP_DATA;
  // This is the stats file generated by webpack loadable plugin
  const statsFile = path.resolve('./build/loadable-stats.json')
  // We create an extractor from the statsFile
  const extractor = new ChunkExtractor({ statsFile });

  const markup = ReactDOMServer.renderToString(
    <ChunkExtractorManager extractor={extractor}>
      <StaticRouter location={req.url} context={context}>
        <App />
      </StaticRouter>
    </ChunkExtractorManager>
  );

  // console.log('context url : -----',context.url);
  // console.log('req url : -----',req.url);
  if (context.url) {
    res.redirect( context.url);
  } else {
    // const fullMarkup = 
    indexHtml({
      helmet: Helmet.renderStatic(),
      serverData: APP_DATA,
      markup,
      extractor
    }).then((fullMarkup) => {
      res.status(200).send(fullMarkup);

    });

  }
}

export const indexHtml = async ({ helmet, serverData, markup, extractor }) => {
  const htmlAttrs = helmet.htmlAttributes.toString();
  const bodyAttrs = helmet.bodyAttributes.toString();

  // do not send link tags with preload or prefetch, they don't make any difference here as corresponding script tags will be sent
  // const linkTags = extractor.getLinkTags();

  // collect your script tags (bundles and chunks for the requested page)
  const scriptTags = extractor.getScriptTags(); // or extractor.getScriptElements();

  // collect your style tags (if you use "mini-css-extract-plugin")
  // style tags are only available in production build as in development build css is included within JS chunks
  // hence no seperate .css files are available in development
  let styleTags = '', inlineStyleTags = '';

  if (NODE_ENV === 'production') {
    styleTags = extractor.getStyleTags()
    try {
      // for SSR, include the .css files content in the <style> tag within the html reponse 
      // it is done so that first page appears styles even in very first frame, otherwise page will remain unstyles untill the css files are downloaded 
      inlineStyleTags = await extractor.getInlineStyleTags();
    } catch (e) { }
  }

  // console.log('LINK TAGS : ',linkTags);
  // console.log('STYLE TAGS : ', styleTags);
  // console.log('SCRIPT TAGS : ', scriptTags);

  // window.process = ${env.forIndexHtml};

  return `
    <!doctype html>
  
    <html lang="en" ${htmlAttrs}>
      <head>
        ${helmet.title.toString()}
        ${helmet.meta.toString()}
    
        <!-- LINK TAGS WITH PRELOAD AND PREFETCH : removed-->

        <!-- INLINE STYLE TAGS : ONLY AVAILABLE IN PRODUCTION -->
        ${inlineStyleTags}
        <!-- STYLE TAGS : ONLY AVAILABLE IN PRODUCTION  -->
        ${styleTags}
      </head>
      <body ${bodyAttrs}>
      <noscript>You need to enable JavaScript to run this app.</noscript>
        <div id="root">${markup}</div>

        <!-- SCRIPT TAGS-->
        ${scriptTags}
        <script>
          window.__SERVER_DATA__ = ${JSON.stringify(serverData)}
        </script>
      </body>
    </html>
  `;
};
